AWSTemplateFormatVersion: '2010-09-09'
Description: Git2S3

Conditions:
  UseApiSecret: !Not
    - !Equals
      - !Ref ApiSecret
      - ''
  UseOutputFiles: !Not
    - !Equals
      - !Ref OutputFiles
      - ''
  AutoGenOutputBucketName: !Not
    - !Equals
      - !Ref OutputBucketName
      - ''

Parameters:
  Git2S3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    Default: andrewpavlov-public-resources
    Type: String
  Git2S3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    Default: lambda/
    Type: String
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    Default: quickstart-git2s3/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  OutputBucketName:
    Description: >-
      OPTIONAL: Bucket Name where the zip file output should be placed, if left
      blank a bucket name will be automatically generated.
    Type: String
    Default: ''
  OutputFiles:
    Description: Output artifacts (all files by default)
    Type: String
    Default: ''
  ApiSecret:
    Description: >-
      WebHook Secrets for use with GitHub Enterprise and GitLab.
      If a secret is matched IP range authentication is bypassed.
      Cannot contain: , \ "
    Type: String
    Default: ''
    NoEcho: 'true'
  MaxMemory:
    Description: Your function is allocated CPU proportional to the memory configured.
    Type: String
    Default: 1024

Resources:
  LambdaZipsBucket:
    Type: 'AWS::S3::Bucket'
  CopyQSZips:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt 
        - CopyZipsFunction
        - Arn
      DestBucket: !Ref LambdaZipsBucket
      SourceBucket: !Ref QSS3BucketName
      Prefix: !Ref QSS3KeyPrefix
      Objects:
        - functions/packages/CreateSSHKey/lambda.zip
        - functions/packages/DeleteBucketContents/lambda.zip
  CopyGit2S3Zips:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt 
        - CopyZipsFunction
        - Arn
      DestBucket: !Ref LambdaZipsBucket
      SourceBucket: !Ref Git2S3BucketName
      Prefix: !Ref Git2S3KeyPrefix
      Objects:
        - git2s3.zip
  CopyZipsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                  - !Sub 'arn:aws:s3:::${Git2S3BucketName}/${Git2S3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${Git2S3KeyPrefix}*'
  CopyZipsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 
        - CopyZipsRole
        - Arn
      Timeout: 240
      Code:
        ZipFile: !Sub | 
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
           
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  fv = o.split('?VersionId=')
                  key = prefix + fv[0]
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  if len(fv) > 1:
                      copy_source['VersionId'] = fv[1]
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          
          
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          
          
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          
          
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
          
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
            
  KeyBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
  OutputBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If
        - AutoGenOutputBucketName
        - !Ref OutputBucketName
        - !Ref 'AWS::NoValue'
      VersioningConfiguration:
        Status: Enabled
  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: >-
        git CodePipeline integration, used to encrypt/decrypt ssh keys stored in
        S3
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
            Action:
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              Bool:
                'kms:GrantIsForAWSResource': true
  CreateSSHKeyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: git2cp-sshkeygen
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                      - /crypto.zip
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                      - /enc_key
              - Effect: Allow
                Action:
                  - 'kms:Encrypt'
                Resource:
                  - !GetAtt 
                    - KMSKey
                    - Arn
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  CreateSSHKeyLambda:
    DependsOn: CopyQSZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: '128'
      Role: !GetAtt 
        - CreateSSHKeyRole
        - Arn
      Runtime: python2.7
      Timeout: '300'
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CreateSSHKey/lambda.zip'
  CreateSSHKey:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 
        - CreateSSHKeyLambda
        - Arn
      KeyBucket: !Ref KeyBucket
      Region: !Ref 'AWS::Region'
      KMSKey: !Ref KMSKey
  DeleteBucketContentsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: git2cp-deletebucketcontents
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref OutputBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref OutputBucket
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  DeleteBucketContentsLambda:
    DependsOn: CopyQSZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: '128'
      Role: !GetAtt 
        - DeleteBucketContentsRole
        - Arn
      Runtime: python2.7
      Timeout: '300'
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'
  DeleteBucketContents:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    DependsOn:
      - KeyBucket
      - OutputBucket
    Properties:
      ServiceToken: !GetAtt 
        - DeleteBucketContentsLambda
        - Arn
      KeyBucket: !Ref KeyBucket
      OutputBucket: !Ref OutputBucket
  Git2S3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-git2s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:DescribeLogGroups'
                  - 'logs:CreateLogGroup'
                  - 'logs:DeleteLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:PutRetentionPolicy'
                  - 's3:*'
                  - 'kms:*'
                  - 'lambda:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'iam:GetRole'
                Resource: '*'
  Git2S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${StackName}
        - StackName: !Ref 'AWS::StackName'
  Git2S3Lambda:
    DependsOn: CopyGit2S3Zips
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      MemorySize: !Ref MaxMemory
      Role: !GetAtt
        - Git2S3Role
        - Arn
      Runtime: nodejs10.x
      Timeout: '300'
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub ${Git2S3KeyPrefix}git2s3.zip
  Git2S3ApiGateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      MemorySize: '128'
      Role: !GetAtt
        - Git2S3Role
        - Arn
      Runtime: nodejs10.x
      Timeout: '300'
      Code:
        ZipFile: !Join
          - ""
          - - "const AWS = require('aws-sdk');"
            - "exports.handler = (event, context, callback) => {"
            - "    let lambda = new AWS.Lambda();"
            - "    let stageVariables = event.stageVariables;"
            - "    let args = JSON.stringify({"
            - !Sub |
                      body: event.body,
                      allowedIPs: stageVariables.allowedIPs,
                      branches: stageVariables.Branches,
                      outputBucket: '${OutputBucket}',
                      keyBucket: '${KeyBucket}',
                      apiSecret: '${ApiSecret}',
                      outputFiles: '${OutputFiles}',
                      publicSSHKey: '${CreateSSHKey}'
            - "    });"
            - "    let params = {"
            - "        FunctionName: '"
            - !GetAtt
              - Git2S3Lambda
              - Arn
            - "',"
            - "        InvokeArgs: args"
            - "    };"
            - "    lambda.invokeAsync(params, (err, data) => {"
            - "        if (err) {"
            - "            console.log(err, err.stack);"
            - "        }"
            - "    });"
            - "    callback(null, {"
            - "        statusCode: 200,"
            - "        body: ''"
            - "    });"
            - "};"
  WebHookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: !Sub
          - ${StackName}-webhook
          - StackName: !Ref 'AWS::StackName'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeAsync'
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt
                    - Git2S3ApiGateLambda
                    - Arn
  WebHookApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref 'AWS::StackName'
      Description: Git 2 S3 Rest API
      Body:
        swagger: '2.0'
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        schemes:
          - https
        paths:
          /gitpull:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !GetAtt
                      - Git2S3ApiGateLambda
                      - Arn
                    - /invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                credentials: !GetAtt
                  - WebHookRole
                  - Arn
                type: aws_proxy
  WebHookApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref WebHookApi
  WebHookApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref WebHookApiDeployment
      RestApiId: !Ref WebHookApi
      StageName: Prod
      Variables:
        AllowedIPs: '0.0.0.0/0'
        Branches: 'develop,master'
Outputs:
  PublicSSHKey:
    Value: !Ref CreateSSHKey
  Git2S3WebHookApi:
    Value: !Join
      - ''
      - - ' https://'
        - !Ref WebHookApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - !Ref WebHookApiProdStage
        - /gitpull
    Export:
      Name: !Sub ${AWS::StackName}-webhook
  KeyBucketName:
    Value: !Ref KeyBucket
  OutputBucketName:
    Value: !Ref OutputBucket
    Export:
      Name: !Sub ${AWS::StackName}-output-bucket
